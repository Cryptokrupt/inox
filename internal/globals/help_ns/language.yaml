module:
  title: Module
  elements:
  - topic: manifest
    text: Module Manifest
    subtopics:
    - topic: manifest/parameters-section
      text: > 
        Module can take parameters, for the main module they correpond to the CLI parameters. When an imported 
        module has parameters the import should include an 'args' section. 
      examples:
      - code: |
          # example parameters for a module handling HTTP requests
          {
             name: {
               pattern: %str
             }
          }
      - code: |
          # example of passing arguments to an imported module
          # main.ix
          manifest {
              permissions: {
                  read: IWD_PREFIX
              }
          }

          import result ./add.ix {
              args: {1, 2}
          } 

          print(result) 

          # add.ix
          manifest {
              parameters: {
                  {
                      name: #first_operand
                      pattern: %int
                  }
                  {
                      name: #second_operand
                      pattern: %int
                  }
              }
          }

          return (mod-args.first_operand + mod-args.second_operand)
      - code: |
          # example parameters for a CLI program

          {
            # positional parameters are listed at the start
            {
                name: #dir
                pattern: %path
                rest: false
                description: "root directory of the project"
            }
            # non positional parameters
            clean-existing: {
                pattern: %bool
                default: false
                description: "if true delete <dir> if it already exists"
            } 
          }
    - topic: manifest/env-section
      text: >
        The env section is an object pattern defining expected environment variables and their type.
      examples:
      - code: |
          # example env section 
          %{
            API_KEY: %secret-string
          }
          ...

          # environment variables can then be accessed:
          API_KEY = env.initial.API_KEY
    - topic: manifest/databases-section
      text: >
        The databases section defines the databases to connect to, it is either an object or a path.
      examples:
      - code: |
          # ℹ️ scroll to the example further below to learn how to connect 
          # to databases defined by other modules.

          # example databases section to connect to a local database 
          # storing its data in the folder /databases/main/.
          # the database will be created if it does not exist.
          {
            main:  {
              resource: ldb://main
              resolution-data: /databases/main/
            }
          }
          ...

          # the database can then be accessed by the module:
          dbs.main

          # ℹ️ The module defining the databases is automatically 
          # granted access to the database.
      - code: |
          # -----------------------------------------------------------
          # If the `/main.ix` module defines a `ldb://main` database, 
          # imported modules can access the database with the 
          # following manifest:

          manifest {
            permissions: {
                read: {
                    ldb://main
                }
                # you can also add the write permission if necessary
            }
            databases: /main.ix
          }

          # the databases can then be accessed by the module:
          db = dbs.main

          # ⚠️ Permissions still need to be granted in the import statement.
           - topic: manifest/databases-section
    - topic: manifest/permissions-section
      text: >
        The permissions section lists the permissions required by the module. 
        Permissions represent a type of action a module is allowed (or forbidden) to do. 
        Most IO operations (filesystem access, HTTP requests) and resource intensive operations 
        (lthread creation) necessitate a permission. 
        
        To learn more about permissions see https://github.com/inoxlang/inox/blob/master/docs/language-reference.md#permissions.
      examples:
      - code: |
          # permission section allowing the module 
          # to create an HTTP server & read any file
          {
            provide: https://localhost
            read: {
              %/...
            }
          }

      - code: |
          # permission section allowing the module 
          # to read from & write to the database ldb://main
          {
            read: {
              ldb://main
            }
            write: {
              ldb://main
            }
          }

      - code: |
          # permission section allowing the module 
          # to send HTTP GET & POST requests to any HTTPS server
          {
            read: {
              %https://**
            }
            write: {
              %https://**
            }
          }

      - code: |
          # permission section allowing the module 
          # to create lightweight threads
          manifest {
              permissions: {
                  create: {
                      threads: {}
                  }
              }
          }
concurrency:
  title: Concurrency
  elements:
  - topic: lthreads
    text: Lightweight threads
    subtopics:
    - topic: lthreads/allow-section
      text: |
        The permissions granted to the lthread's embedded module.
        Make sure the module spawning the lthread has the granted permissions
      examples:
      - code: |
          {
            read: {%https://**}
          }

    - topic: lthreads/globals-section
      text: |
        globals of embedded module, base globals such as **http**, **read**, **sleep** or always passed.
      examples:
      - code: |
          {
            a: 1, 
            shared_object: {}
          }