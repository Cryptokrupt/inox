functional:
  title: Functional Programming
  elements:
  - topic: map
    related-topics: [filter, some, all, none]
    text: the map function creates a list by applying an operation on each element of an iterable
    examples:
    - code: 'map([{name: "foo"}], .name)'
      output: '["foo"]'
    - code: 'map([{a: 1, b: 2, c: 3}], .{a,b})'
      output: '[{a: 1, b: 2}]'
    - code: 'map([0, 1, 2], Mapping{0 => "0" 1 => "1"})'
      output: '["0", "1", nil]'
    - code: 'map([97, 98, 99], torune)'
      output: "['a', 'b', 'c']"
    - code: 'map([0, 1, 2], @($ + 1))'
      output: '[1, 2, 3]'

  - topic: filter
    related-topics: [map, some, all, none]
    text: the filter function creates a list by iterating over an iterable and keeping elements that pass a condition
    examples:
    - code: 'filter(["a", "0", 1], %int)'
      output: '[1]'
    - code: 'filter([0, 1, 2], @($ >= 1))'
      output: '[1, 2]'

  - topic: some
    related-topics: [map, filter, all, none]
    text: the some function returns true if and only if at least one element of an iterable passes a condition. For an empty iterable the result is always true.
    examples:
    - code: 'some(["a", "0", 1], %int)'
      output: 'true'
    - code: "some([0, 1, 2], @($ == 'a'))"
      output: 'false'

  - topic: all
    related-topics: [map, filter, some, none]
    text: the all function returns true if and only if all elements of an iterable pass a condition. For an empty iterable the result is always true.
    examples:
    - code: 'all([0, 1, "a"], %int)'
      output: 'false'
    - code: 'all([0, 1, 2], @($ >= 0))'
      output: 'true'
      
  - topic: none
    related-topics: [map, filter, some, all]
    text: the none function returns true if and only if no elements of an iterable pass a condition. For an empty iterable the result is always true.
    examples:
    - code: 'none([0, 1, "a"], %int)'
      output: 'false'
    - code: 'none([0, 1, 2], @($ < 0))'
      output: 'true'

  - topic: sort
    text: >
      the sort function creates a new list by sorting a list of strings or integers, the second argument is an identifier describing
      the order. For strings the available orderings are #lex (lexicographic) & #revlex (same but reversed). For integers the available
      orderings are #asc (ascending) & #desc (descending).
    examples:
    - code: 'sort([2, 1], #asc)'
      output: '[1, 2]'
    - code: 'sort(["b", "a"], #lex)'
      output: '["a", "b"]'

  - topic: find
    text: the find function searches for items matching a pattern at a given location (a string, an iterable, a directory)
    examples:
    - code: 'find %`a+` "a-aa-aaa"'
      output: '["a", "aa", "aaa"]'
    - code: 'find %./**/*.json ./'
      output: '[./file.json, ./dir/file.json, ./dir/dir/.file.json]'
    - code: find %int ['1', 2, "3"]
      output: '[2]'
  
  - topic: idt
    text: the idt (identity) function takes a single argument and returns it.

rand:
  elements:
  - topic: rand
    related-topics: [rand, pseudo_rand]
    text: >
      the rand function generates/picks a random value in a cryptographically secure way.
      If the argument is a pattern a matching value is returned, if the argument is an indexable an element is picked.
    examples:
    - code: 'rand(%int(0..10))'
      output: '3'
    - code: 'rand(%str("a"+))'
      output: '"aaaaa"'
    - code: 'rand(["a", "b"])'
      output: '"b"'

crypto:
  title: Cryptography
  elements:
  - topic: hash_password
    text: >
      the hash_password function hashes a password string using the Argon2id algorithm, it returns a string
      containing: the hash, a random salt and parameters. You can find the implementation in this file: https://github.com/inoxlang/inox/blob/master/internal/globals/crypto.go 
    examples:
    - code: 'hash_password("password")'
      output: '$argon2id$v=19$m=65536,t=1,p=1$xDLqbPJUrCURnSiVYuy/Qg$OhEJCObGgJ2EbcH0a7oE2sfD1+5T2BPRs8SRWkreE00'

  - topic: check_password
    text: the check_password verifies that a password matches a Argon2id hash.
    related-topics: [hash_password]
    examples:
    - code: 'check_password("password", "$argon2id$v=19$m=65536,t=1,p=1$xDLqbPJUrCURnSiVYuy/Qg$OhEJCObGgJ2EbcH0a7oE2sfD1+5T2BPRs8SRWkreE00")'
      output: 'true'

  - topic: sha256
    text: the sha256 function hashes a string or a byte sequence with the SHA-256 algorithm
    examples:
    - code: sha256("string")
      output: '0x[473287f8298dba7163a897908958f7c0eae733e25d2e027992ea2edc9bed2fa8]'

  - topic: sha384
    text: the sha384 function hashes a string or a byte sequence with the SHA-384 algorithm
    examples:
    - code: sha384("string")
      output: '0x[36396a7e4de3fa1c2156ad291350adf507d11a8f8be8b124a028c5db40785803ca35a7fc97a6748d85b253babab7953e]'

  - topic: sha512
    text: the sha512 function hashes a string or a byte sequence with the SHA-512 algorithm
    examples:
    - code: sha512("string")
      output: '0x[2757cb3cafc39af451abb2697be79b4ab61d63d74d85b0418629de8c26811b529f3f3780d0150063ff55a2beee74c4ec102a2a2731a1f1f7f10d473ad18a6a87]'

  - topic: rsa
    namespace: true
    text: the rsa namespace contains functions to generate a key pair & encrypt/decrypt using OAEP.
    subtopics:
    - topic: rsa.gen_key
      text: the rsa.gen_key function generates a public/private key pair
      examples:
      - code: 'rsa.gen_key()'
        output: '#{public: "<key>", private: "<secret key>"}'

    - topic: rsa.encrypt_oaep
      text: the rsa.encrypt_oaep function encrypts a string or byte sequence using a public key
      examples:
      - code: 'rsa.encrypt_oaep("message", public_key)'

    - topic: rsa.decrypt_oaep
      text: the rsa.decrypt_oaep function decrypts a string or byte sequence using a private key
      examples:
      - code: 'rsa.encrypt_oaep(bytes, private_key)'

encoding:
  title: Encodings
  elements:
  - topic: b64
    text: the b64 function encodes a string or byte sequence to Base64.
  - topic: db64
    text: the db64 function decodes a byte sequence from Base64.

  - topic: hex
    text: the hex function encodes a string or byte sequence to hexadecimal.
  - topic: unhex
    text: the unhex function decodes a byte sequence from hexadecimal.


html:
  namespace: true
  title: HTML
  elements:
  - topic: html
    text: the html namespace contains functions to create & manipulate HTML nodes

  - topic: html.h1
    text: the html.h1 function creates a h1 HTML element

  - topic: html.h2
    text: the html.h2 function creates a h2 HTML element

  - topic: html.h3
    text: the html.h3 function creates a h3 HTML element

  - topic: html.h4
    text: the html.h4 function creates a h4 HTML element

chrome:
  namespace: true
  title: Browser Automation
  elements:
  - topic: chrome
    related-topics: [chrome.Handle]
    text: chrome namespace

  - topic: chrome.Handle
    text: > 
      the Handle function creates a new Chrome handle that provides methods to interact with a web browser instance.
      You should call its .close() method when you are finished using it. Chrome or Chromium should be installed, 
      the list of checked paths can be found here: https://github.com/chromedp/chromedp/blob/master/allocate.go#L349.
    examples:
    - code: 'chrome.Handle!()'
    subtopic-names: [
      chrome.Handle/nav, chrome.Handle/wait_visible, chrome.Handle/click, chrome.Handle/screenshot, 
      chrome.Handle/screenshot_page, chrome.Handle/html_node, chrome.Handle/close
    ]

  - topic: chrome.Handle/nav
    text: the nav method makes the browser navigate to a page.
    examples:
    - code: 'handle.nav https://go.dev/'

  - topic: chrome.Handle/wait_visible
    text: the wait_visible method waits until the DOM element matching the selector is visible.
    examples:
    - code: 'handle.wait_visible "div.title"'

  - topic: chrome.Handle/click
    text: the click method makes the browser click on the first DOM element matching the selector.
    examples:
    - code: 'handle.click "button.menu-item"'

  - topic: chrome.Handle/screenshot
    text: the screenshot method takes a screenshot of the first DOM element matching the selector.
    examples:
    - code: 'png_bytes = handle.screenshot!("#content")'

  - topic: chrome.Handle/screenshot_page
    text: the screenshot_page method takes a screenshot of the entire browser viewport.
    examples:
    - code: 'png_bytes = handle.screenshot_page!()'

  - topic: chrome.Handle/html_node
    text: the screenshot method gets the HTML of the first DOM element matching the selector, the result is %html.node not a string.
    examples:
    - code: 'png_bytes = handle.screenshot_page!()'

  - topic: chrome.Handle/close
    text: this method should be called when you are finished using the Chrome handle.

containers:
  title: Data Containers
  elements:
  - topic: Graph
    related-topics: [Tree]
    text: the Graph function creates a directed Graph

  - topic: Tree
    related-topics: [Graph]
    text: the Tree function creates a tree from a udata value
    examples:
    - code: 'Tree(udata "root")'
      explanation: creates a Tree with a single node

  - topic: Stack
    text:  "the Stack function creates a stack from an iterable"
    examples:
    - code: 'Stack([])'
      explanation: creates an empty stack

    - code: 'Stack([1])'
      explanation: "creates a stack with an element 1"

  - topic: Queue
    text: the Queue function creates a queue from an iterable
    examples:
    - code: 'Queue([])'
      explanation: creates an empty queue
    - code: 'Queue([1])'
      explanation: creates a queue with an element 1

  - topic: Set
    text: >
      the Set function creates a set from an iterable, by default only representable (serializable) values are allowed.
      A configuration is accepted as a second argument.

    examples:
    - code: 'Set([])'
      explanation: creates an empty set
    - code: 'Set([1])'
      explanation: "creates a queue with an element 1"
    - code: 'Set([], {element: %int})'
      explanation: creates an empty set of integers
    - code: 'Set([{name: "A"}, {name: "B"}], {uniqueness: .name})'
      explanation: creates a set of values where the identity is defined by the .name property

  - topic: Map
    text: the Map function creates a map from flat list of entries
    examples:
    - code: 'Map(["key1", 10, "key2", 20]'
      explanation: creates a Map with the entries "key1" -> 10, "key2" -> 20`

  - topic: Ranking
    text: >
      the Ranking function creates a ranking from a flat list of entries.
      An entry is composed of a value and a floating-point score. 
      The value with the highest score has the first rank (0), values with the same score have the same rank.
    examples:
    - code: 'Ranking(["best player", 10.0, "other player", 5.0])'
      explanation: 'creates a Ranking with the following ranks: rank(0) -> "best player", rank(1) -> "other player"'
    - code: 'Ranking(["best player", 10.0, "other player", 10.0])'
      explanation: 'creates a Ranking with the following ranks: rank(0) -> "best player" & "other player"'
      
  - topic: Thread
    text: the Thread function creates a thread from an iterable.
    examples:
    - code: 'Thread([{message: "hello", author-id: "5958"}])'

dns:
  namespace: true
  title: DNS
  elements:
  - topic: dns.resolve
    text: the dns.resolve function retrieves DNS records of the given type.
    examples:
    - code: 'dns.resolve!("github.com" "A")'
      explanation: retrieves "A" records for github.com

tcp:
  namespace: true
  title: TCP
  elements:
  - topic: tcp.connect
    text: the tcp.connect function creates a TCP connection to a given host.
    examples:
    - code: |
        conn = tcp.connect!(://example.com:80)

        conn.write!("GET / HTTP/1.1\nHost: example.com\n\n")
        print tostr(conn.read!())

        conn.close()

resource:
  namespace: false
  title: Resource Manipulation
  elements:
  - topic: read
    text: > 
      read is a general purpose function that reads the content of a file, a directory or a HTTP resource.
      The content is parsed by default, to disable parsing use --raw after the resource's name: a byte slice 
      will be returned instead. The type of content is determined by looking at the extension for files & 
      the Content-Type header for HTTP resources.
    examples:
      - code: 'read ./'
        output: |
          [
            dir/
            file.txt 1kB 
          ]
        explanation: returns a list containing the entries of the directory ./

      - code: 'read ./file.txt'
        output: hello

      - code: 'read ./file.json'
        output: '{"key": "value"}'

      - code: 'read https://jsonplaceholder.typicode.com/posts/1'
        output: |
          {
            "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita....", 
            "id": 1.0, 
            "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit", 
            "userId": 1.0
          }
  - topic: create
    text: create is a general purpose function that can create a file, a directory or a HTTP resource.
    examples:
    - code: 'create ./dir/'
    - code: 'create ./empty-file.txt'
    - code: 'create ./file.txt "content"'

  - topic: update
    text: >
      update is a general purpose function that updates an existing resource, it has 2 modes: append and replace.
      Replace is the default mode.
    examples:
    - code: 'update ./file.txt append "additional content"'
    - code: update ./file.txt "new content"
    - code: update ./file.txt replace "new content"
    - code: update <url> tojson({})'

  - topic: delete
    text: 'delete is a general purpose function that deletes a resource, deletion is recursive for directories.'
    examples:
    - code: 'delete ./file.txt'
    - code: 'delete ./dir/'
    - code: 'delete <url>'

fs:
  namespace: true
  title: Filesystem
  elements:
  - topic: fs
    text: the fs namespace contains functions to interact with the filesystem.

  - topic: fs.mkfile
    text: >
      The fs.mkfile function takes a file path as first argument. It accepts a --readonly switch that causes 
      the created file to not have the write permission ; and a %readable argument that is the content of the file to create.
    examples:
    - code: fs.mkfile ./file.txt
    - code: fs.mkfile ./file.txt "content"

  - topic: fs.mkdir
    text: the fs.mkdir function takes a directory path as first argument & and optional dictionary literal as a second argument.
      The second argument recursively describes the content of the directory.
    examples:
    - code: fs.mkdir ./dir_a/
    - code: |
        dir_content = :{
            ./subdir_1/: [./empty_file]
            ./subdir_2/: :{  
                ./file: "foo"
            }
            ./file: "bar"
        }

        fs.mkdir ./dir_b/ $dir_content

  - topic: fs.read
    text: 'the fs.read function behaves exactly like the read function but only works on files & directories.'

  - topic: fs.read_file
    text: 'the fs.read function behaves exactly like the read function but only works on files.'

  - topic: fs.ls
    text: >
      the fs.ls function takes a directory path or a path pattern as first argument and returns a list of entries, if no argument is provided
      the ./ directory is used.
    examples:
    - code: 'fs.ls()'
    - code: 'fs.ls ./'
    - code: 'fs.ls %./*.json'

  - topic: fs.rename
    alias: fs.mv
    text: >
      the fs.rename (fs.mv) function renames a file, it takes two path arguments. 
      An error is returned if a file already exists at the target path.

  - topic: fs.cp
    text: >
      the fs.cp function copies a file/dir at a destination or a list of files in a destination directory, the copy is recursive by default.
      As you can see this behaviour is not exactly the same as the cp command on Unix.
      An error is returned if a file or a directory already exists at one of the target paths (recursive).
    examples:
    - code: 'fs.cp ./file.txt ./file_copy.txt'
    - code: 'fs.cp ./dir/ ./dir_copy/'
    - code: 'fs.cp [./file.txt, ./dir/] ./dest_dir/'
      explanation: 'creates ./dest_dir/file.txt and ./dest_dir/dir/ by copying the provided file & directory'

  - topic: fs.exists
    text: 'the fs.exists takes a path as first argument and returns a boolean'

  - topic: fs.isdir
    text: 'the fs.isdir function returns true if there is a directory at the given path'

  - topic: fs.isfile
    text: 'the fs.isfile returns true if there is a regular file at the given path'

  - topic: fs.remove
    alias: fs.rm
    text: 'the fs.remove function removes a file or a directory recursively'

  - topic: fs.glob
    text: 'the fs.glob function takes a globbing path pattern argument (%./a/... will not work) and returns a list of paths matching this pattern.'
    example:
    - code: 'fs.glob %./*.json'
      explanation: 'returns paths of JSON files in the current directory.'

  - topic: fs.find
    text: >
      the fs.find function takes a directory path argument followed by one or more globbing path patterns, 
      it returns a directory entry for each file matching at least one of the pattern.

    examples:
    - code: 'fs.find ./ %./**/*.json'

  - topic: fs.get_tree_data
    text: > 
      the fs.get_tree_data function takes a directory path argument and returns a %udata value 
      thats contains the file hiearachy of the passed directory.
    examples:
    - code: fs.get_tree_data(./)

http:
  namespace: true
  title: HTTP
  elements:
  - topic: http
    text: >
      the http namespace contains functions to read, modify & delete HTTP resources.
      Most functions accept the --insecure option to ignore certificate errors & the --client option
      to specify a HTTP client to use.
  - topic: http.get
    text: >
      the http.get function takes a URL (or host) as first argument and returns a HTTP response.
      The --insecure options causes the function to ignore certificate errors.
    examples:
    - code: 'http.get https://example.com/'

  - topic: http.read
    text: 'the http.read function behaves exactly like the read function but only works on HTTP resources.'
    examples:
    - code: 'http.read https://jsonplaceholder.typicode.com/posts/1'

  - topic: http.exists
    text: 'the http.exists takes a URL (or host) as argument, it sends a HEAD request and returns true if the status code is less than 400.'
  - topic: http.post
    text: > 
      the http.post sends a POST request to the specified URL (or host) with the given body value, the body value can be any %readable or serializable object/list.
      A %mimetype value can be specified to change the value of the Content-Type header.
    examples:
    - code: http.post https://example.com/posts '{"title":"hello"}'
    - code: 'http.post https://example.com/posts {title: "hello"}'
    - code: 'http.post https://example.com/posts [ {title: "hello"} ]'
    - code: http.post https://example.com/posts mime"json" '{"title":"hello"}'


  - topic: http.patch
    text: the http.patch function works like http.post but sends a HTTP PATCH request instead
    related-topics: [http.post]

  - topic: http.delete
    text: the http.delete function sends a HTTP DELETE request to the specified URL

  - topic: http.Client
    text: the http.Client function creates a HTTP client that can be used in most http.* functions with the --client flag.

    examples:
    - code: 'http.Client{ save-cookies: true }'
      explanation: saves the cookies received in responses, cookies are not persisted

    - code: 'http.Client{ insecure: true }'
      explanation: ignore certificate errors

    - code: |
        http.Client{
          request-finalization: :{
            https://example.com : { 
              add-headers: {X-API-KEY: env.initial.API_KEY}
            }
          } 
        }
      explanation: add X-API-KEY header to all requests sent to https://example.com
  - topic: http.Server
    text: >
      the http.Server function creates a listening HTTP server with a given host & handler. The handler can be an function
      or a Mapping that routes requests. When you send a request to a server listening to https://localhost add the --insecure flag to ignore certificate errors.
    examples:
    - code: |
        fn handle(rw http.resp-writer, r http.req){
          rw.write_json({ a: 1 })
        }

        server = http.Server!(https://localhost:8080, Mapping {
            /hello => "hello"
            %/... => handle
        })
      explanation: >
        creates a HTTP server at https://localhost:8080, requests to /hello will return 'hello' & other requests will
        be handled by the 'handle' function.

    - code: |
        fn handle(rw http.resp-writer, r http.req){
            match r.path {
              / {
                  rw.write_json({ a: 1 })
              }
              %/... {
                rw.write_status(404)
              }
            }
        }

        server = http.Server!(https://localhost:8080, handle)
      explanation: >
        creates a HTTP server at https://localhost:8080 that returns a JSON body with {a: 1} for the '/' path 
        and a 404 status for other paths.

  - topic: http.FileServer
    text: the http.FileServer creates a HTTP server that serves static file from a given directory.
    examples:
    - code: http.FileServer!(https://localhost:8080, ./examples/static/)
      explanation: https://localhost:8080/index.html will return the content of the file ./examples/static/index.html

  - topic: http.servefile

  - topic: http.CSP
    text: |
      the http.CSP function creates a Content Security Policy with the passed directives and the following default directives:
        default-src 'none';
        frame-ancestors 'none';
        frame-src 'none';
        script-src-elem 'self';
        connect-src 'self';
        font-src 'self';
        img-src 'self';
        style-src 'self'
    examples:
    - code: "http.CSP{default-src: \"'self'\"}"
Errors:
  namespace: false
  elements:
  - topic: Error
    text: the Error function creates an error from the provided string and an optional data argument.
    examples:
    - code: 'Error("failed to create user")'
    - code: 'Error("failed to create user", {user_id: 100})'
