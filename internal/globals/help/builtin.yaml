functional:
  namespace: false
  elements:
  - topic: map
    related-topics: [filter, some, all, none]
    text: the map function creates a list by applying an operation on each element of an iterable
    examples:
    - code: 'map([{name: "foo"}], .name)'
      output: '["foo"]'
    - code: 'map([{a: 1, b: 2, c: 3}], .{a,b})'
      output: '[{a: 1, b: 2}]'
    - code: 'map([0, 1, 2], Mapping{0 => "0" 1 => "1"})'
      output: '["0", "1", nil]'
    - code: 'map([97, 98, 99], torune)'
      output: "['a', 'b', 'c']"
    - code: 'map([0, 1, 2], @($ + 1))'
      output: '[1, 2, 3]'

  - topic: filter
    related-topics: [map, some, all, none]
    text: the filter function creates a list by iterating over an iterable and keeping elements that pass a condition
    examples:
    - code: 'filter(["a", "0", 1], %int)'
      output: '[1]'
    - code: 'filter([0, 1, 2], @($ >= 1))'
      output: '[1, 2]'

  - topic: some
    related-topics: [map, filter, all, none]
    text: the some function returns true if and only if at least one element of an iterable passes a condition. For an empty iterable the result is always true.
    examples:
    - code: 'some(["a", "0", 1], %int)'
      output: 'true'
    - code: "some([0, 1, 2], @($ == 'a'))"
      output: 'false'

  - topic: all
    related-topics: [map, filter, some, none]
    text: the all function returns true if and only if all elements of an iterable pass a condition. For an empty iterable the result is always true.
    examples:
    - code: 'all([0, 1, "a"], %int)'
      output: 'false'
    - code: 'all([0, 1, 2], @($ >= 0))'
      output: 'true'
      
  - topic: none
    related-topics: [map, filter, some, all]
    text: the none function returns true if and only if no elements of an iterable pass a condition. For an emptty iterable the result is always true.
    examples:
    - code: 'none([0, 1, "a"], %int)'
      output: 'false'
    - code: 'none([0, 1, 2], @($ < 0))'
      output: 'true'

  - topic: sort
    text: >
      the sort function creates a new list by sorting a list of strings or integers, the second argument is an identifier describing
      the order. For strings the available orderings are #lex (lexicographic) & #revlex (same but reversed). For integers the available
      orderings are #asc (ascending) & #desc (descending).
    examples:
    - code: 'sort([2, 1], #asc)'
      output: '[1, 2]'
    - code: 'sort(["b", "a"], #lex)'
      output: '["a", "b"]'

  - topic: find
    text: the find function searches for items matching a pattern at a given location (a string, an iterable, a directory)
    examples:
    - code: 'find %`a+` "a-aa-aaa"'
      output: '["a", "aa", "aaa"]'
    - code: 'find %./**/*.json ./'
      output: '[./file.json, ./dir/file.json, ./dir/dir/.file.json]'
    - code: find %int ['1', 2, "3"]
      output: '[2]'
  
  - topic: idt
    text: the idt (identity) function takes a single argument and returns it.

rand:
  namespace: false
  elements:
  - topic: rand
    related-topics: [rand, pseudo_rand]
    text: >
      the rand function generates/pick a random value in a cryptographically secure way.
      If the argument is a pattern a matching value is returned, if the argument is an indexable an element is picked.
    examples:
    - code: 'rand(%int(0..10))'
      output: '3'
    - code: 'rand(%str("a"+))'
      output: '"aaaaa"'
    - code: 'rand(["a", "b"])'
      output: '"b"'

crypto:
  elements:
  - topic: hash_password
    text: >
      the hash_password function hashes a password string using the Bcrypt hashing algorithm, it accepts the cost
        as a second optional argument. The cost is an integer between 4 and 31, it defaults to 7.
    examples:
    - code: 'hash_password("password")'
      output: '"JDJhJDA3JHNNNzRwaFVNUFVCNzVDQmxINU5HaWVOZERKZ09IRkx4a2xxYTFPTktsV3Nkd2JqampmYmxT"'
    - code: 'hash_password("password", 10)'
      output: '"JDJhJDEwJGhLODFiVThNdTlJZXVRMXVZdHlIUi5oOS5GSXljNWpYWGcwaVhXWUZYZC5YRTduR1hmSjl1"'

  - topic: check_password
    text: the check_password hashes a string or a byte sequences using the SHA-256 algorithm
    examples:
    - code: 'check_password("password", "JDJhJDA3JHNNNzRwaFVNUFVCNzVDQmxINU5HaWVOZERKZ09IRkx4a2xxYTFPTktsV3Nkd2JqampmYmxT")'
      output: 'true'

  - topic: sha256
    text: the sha256 function hashes a string or a byte sequence with the SHA-256 algorithm
    examples:
    - code: sha256("string")
      output: '0x[473287f8298dba7163a897908958f7c0eae733e25d2e027992ea2edc9bed2fa8]'

  - topic: sha384
    text: the sha384 function hashes a string or a byte sequence with the SHA-384 algorithm
    examples:
    - code: sha384("string")
      output: '0x[36396a7e4de3fa1c2156ad291350adf507d11a8f8be8b124a028c5db40785803ca35a7fc97a6748d85b253babab7953e]'

  - topic: sha512
    text: the sha512 function hashes a string or a byte sequence with the SHA-512 algorithm
    examples:
    - code: sha512("string")
      output: '0x[2757cb3cafc39af451abb2697be79b4ab61d63d74d85b0418629de8c26811b529f3f3780d0150063ff55a2beee74c4ec102a2a2731a1f1f7f10d473ad18a6a87]'

html:
  elements:
  - topic: html.h1
    text: the html.h1 function creates a h1 HTML element

  - topic: html.h2
    text: the html.h2 function creates a h2 HTML element

  - topic: html.h3
    text: the html.h3 function creates a h3 HTML element

  - topic: html.h4
    text: the html.h4 function creates a h4 HTML element

chrome:
  elements:
  - topic: chrome
    related-topics: [chrome.Handle]
    text: chrome namespace

  - topic: chrome.Handle
    text: the Handle function creates a new Chrome handle
    examples:
    - code: 'chrome.Handle!()'

containers:
  namespace: false
  elements:
  - topic: Graph
    related-topics: [Tree]
    text: the Graph function creates a directed Graph

  - topic: Tree
    related-topics: [Graph]
    text: the Tree function creates a tree from a udata value
    examples:
    - code: 'Tree(udata "root")'
      explanation: creates a Tree with a single node

  - topic: Stack
    text:  "the Stack function creates a stack from an iterable"
    examples:
    - code: 'Stack([])'
      explanation: creates an empty stack

    - code: 'Stack([1])'
      explanation: "creates a stack with an element 1"

  - topic: Queue
    text: the Queue function creates a queue from an iterable
    examples:
    - code: 'Queue([])'
      explanation: creates an empty queue
    - code: 'Queue([1])'
      explanation: creates a queue with an element 1

  - topic: Set
    text: the Set function creates a set from an iterable, only representable (serializable) values are allowed
    examples:
    - code: 'Set([])'
      explanation: creates an empty set
    - code: 'Set([1])'
      explanation: "creates a queue with an element 1"

  - topic: Map
    text: the Map function creates a map from a list of flat entries
    examples:
    - code: 'Map(["key1", 10, "key2", 20]'
      explanation: creates a Map with the entries "key1" -> 10, "key2" -> 20`

  - topic: Ranking
    text: >
      the Ranking function creates a ranking from a list of flat entries.
      An entry is composed of a value and a floating-point score. 
      The value with the highest score has the first rank (0), values with the same score have the same rank.
    examples:
    - code: 'Ranking(["best player", 10.0, "other player", 5.0])'
      explanation: 'creates a Ranking with the following ranks: rank(0) -> "best player", rank(1) -> "other player"'
    - code: 'Ranking(["best player", 10.0, "other player", 10.0])'
      explanation: 'creates a Ranking with the following ranks: rank(0) -> "best player" & "other player"'
      
  - topic: Thread
    text: the Thread function creates a thread from an iterable.
    examples:
    - code: 'Thread([{message: "hello", author-id: "5958"}])'

dns:
  elements:
  - topic: dns.resolve
    text: the dns.resolve function retrieves DNS records of the given type.
    examples:
    - code: 'dns.resolve!("github.com" "A")'
      explanation: retrieves "A" records for github.com

tcp:
  elements:
  - topic: tcp.connect
    text: the tcp.connect function creates a TCP connection to a given host.
    examples:
    - code: |
        conn = tcp.connect!(://example.com:80)

        conn.write!("GET / HTTP/1.1\nHost: example.com\n\n")
        print tostr(conn.read!())

        conn.close()

Error:
  namespace: false
  elements:
  - topic: Error
    text: the Error function creates an error from the provided string and an optional data argument.
    examples:
    - code: 'Error("failed to create user")'
    - code: 'Error("failed to create user", {user_id: 100})'

Resource Manipulation:
  namespace: false
  elements:
  - topic: read
    text: > 
      read is a general purpose function that reads the content of a file, a directory or a HTTP resource.
      The content is parsed by default, to disable parsing use --raw after the resource's name: a byte slice 
      will be returned instead.
    examples:
      - code: 'read ./'
        output: |
          [
            dir/
            file.txt 1kB 
          ]
        explanation: returns a list containing the entries of the directory ./

      - code: 'read ./file.txt'
        output: hello

      - code: 'read ./file.json'
        output: '{"key": "value"}'

      - code: 'read https://jsonplaceholder.typicode.com/posts/1'
        output: |
          {
            "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita....", 
            "id": 1.0, 
            "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit", 
            "userId": 1.0
          }
  - topic: create
    text: create is a general purpose function that can create a file, a directory or a HTTP resource.
    examples:
    - code: 'create ./dir/'
    - code: 'create ./empty-file.txt'
    - code: 'create ./file.txt "content"'

  - topic: update
    text: >
      update is a general purpose function that updates an existing resource, it has 2 modes: append and replace.
      Replace is the default mode.
    examples:
    - code: update ./file.txt append 'additional content'`
    - code: update ./file.txt 'new content'`
    - code: update ./file.txt replace 'new content'`
    - code: update <url> tojson({})'

  - topic: delete
    text: 'delete is a general purpose function that deletes a resource, deletion is recursive for directories.'
    examples:
    - code: 'delete ./file.txt'
    - code: 'delete ./dir/'
    - code: 'delete <url>'
