const (
    HOST = https://localhost:1200
)

manifest {
    permissions: {
        create: {
            %/...
            routines: {}
            %https://**
        }
        read: [%/..., %https://**]
        update: [%/..., %https://**]
        provide: [%/..., %https://**, %https://**:1200]
        delete: [%/..., %https://**]
    }
    limits: {
        "fs/read": 100MB/s
        "fs/write": 10MB/s
        "http/request": 100x/s
    }
}

import ./explorer.ix 
import ./editor.ix
import ./shell.ix 


@host = HOST

$$ide = {
    editor: editor
    shell: shell
    output: RingBuffer(100kB)

    lifetimejob #handle-messages {
        manifest {
            permissions: {
                read: %/...
            }
        }

        for msg in watch_received_messages(self) {
            print "message data =" $msg.data
            data = msg.data

            match data {
                %rec(%{ide-action: #run-script, path: %path, ...}) {
                    fprint self.output concat "\n[run " tostr(data.path) "]"

                    assign result state errors err = inox.run_local_script(data.path, {
                        out: self.output
                    })

                    if err? {
                        fprint self.output $err
                    } else {
                        fprint self.output $result
                    }
                }
                %set-edited-file {
                    sendval data to self.editor
                }
            }
        }
    }
}

add_ctx_data(#ide, ide)

server = http.Server!(HOST, {
    routing: Mapping {
        /explorer => explorer
        /editor => ide.editor
        /shell => ide.shell
        /output => ide.output

        # static
        path %/*.css => read!(./ide/css/{path.rel_equiv}, --raw)
        path %/*.woff => read!(./ide/fonts/{path.rel_equiv}, --raw)
        path %/*.woff2 => read!(./ide/fonts/{path.rel_equiv}, --raw)
        /index.js => read!(./ide/js/index.js, --raw)
        /lib.js => read!(./ide/js/lib.js, --raw)
        /xterm.js => read!(./ide/js/xterm.js, --raw)
        / => read!(./ide/index.html, --raw)

        %/... => #notfound
    }
    default-csp: dom.CSP{
        style-src: ["'self'", "'unsafe-inline'"]
    }
})

server.waitClosed()
