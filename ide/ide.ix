const (
    HOST = https://localhost:1200
)

manifest {
    permissions: {
        create: {
            %/...
            routines: {}
            %https://**
        }
        read: {
            %/...
            %https://**
            system-graph: {}
        }
        update: [%/..., %https://**]
        provide: [%/..., %https://**, %https://**:1200]
        delete: [%/..., %https://**]
    }
    limits: {
        "fs/read": 100MB/s
        "fs/write": 10MB/s
        "http/request": 100x/s
    }
}

import ./explorer.ix 
import ./editor.ix
import ./shell.ix 


@host = HOST

$$ide = {
    editor: editor
    shell: shell
    output: RingBuffer(100kB)

    lifetimejob #handle-messages {
        manifest {
            permissions: {
                read: %/...
            }
        }

        for msg in watch_received_messages(self) {
            print "message data =" $msg.data
            data = msg.data

            match data {
                %rec(%{ide-action: #run-script, path: %path, ...}) {
                    fprint self.output concat "\n[run " tostr(data.path) "]"

                    assign result state errors err = inox.run_local_script(data.path, {
                        out: self.output
                    })

                    if err? {
                        fprint self.output $err
                    } else {
                        fprint self.output $result
                    }
                }
                %set-edited-file {
                    sendval data to self.editor
                }
            }
        }
    }
}

add_ctx_data(#ide, ide)

assign graph ok = get_system_graph()

if !ok {
    return "failed to get system graph"
}

$$graph_history = ValueHistory(graph, {
    max-length: 10
    render: fn(graph %sysgraph) => html.div{
        class: "sysgraph"
    
        tostr("")
        html.div{
            class: "sysgraph__nodes"
            ("nodes:")
            html.ul{
                children: map(graph.nodes, fn(node %sysgraph.node) => html.div{
                    id: node.value_id

                    html.span{node.name}, 
                    (" "), 
                    html.span{node.type_name}, 
                    (" "), 
                    html.span{tostr(node.value_id)}
                    html.ul{
                        class: "sysgraph-node__edges"
                        children: map(node.edges, fn(edge) => html.div{
                            edge.text, 
                            (" "), html.a{tostr(edge.to), href: tostr(edge.to)}
                        })
                    }
                })
            }
        }
        html.div{
            class: "sysgraph__events"
            ("events: ")
            html.ul{
                children: map(graph.events, fn(event) => html.div{
                    html.span{event.text}
                })
            }
        }
    }
})

server = http.Server!(HOST, {
    routing: Mapping {
        /explorer => explorer
        /editor => ide.editor
        /shell => ide.shell
        /output => ide.output
        /graph => graph_history

        # static
        path %/*.css => read!(./ide/css/{path.rel_equiv}, --raw)
        path %/*.woff => read!(./ide/fonts/{path.rel_equiv}, --raw)
        path %/*.woff2 => read!(./ide/fonts/{path.rel_equiv}, --raw)
        path %/*.js => read!(./ide/js/{path.rel_equiv}, --raw)

        / => read!(./ide/index.html, --raw)
        /ide-debug => read!(./ide/ide-debug.html, --raw)

        %/... => #notfound
    }
    default-csp: dom.CSP{
        style-src: ["'self'", "'unsafe-inline'"]
    }
})

server.wait_closed()
