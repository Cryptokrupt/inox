manifest {}

# functions are declared in the global scope
fn hello(name, end){
    print("hello", name, end)
    return nil
}

# function expression
func = fn(){
    print "hello"
}

# ------ Calling functions ------

# functions can be called with parentheses or with a command-like syntax
func()
hello("foo", "!")
hello "bar" "!"


fn f(){
    return Array(1, Error("expected failure !!"))
}

assign res err = f() # the array is destructured
print "res =" $res "err =" $err

# ------ Parameter and return types ------

# type of a is "any"
fn myfunc(a, b int) int {
    assert (a match %int)

    return (a + b)
}

print "myfunc(1, 2): " myfunc(1, 2)
# this would cause an error:
# print "myfunc(1, true): " myfunc(1, true)


# if no return type is specified, it is inferred on each call
fn identity(x){
    return x
}

print "identity(1) + 2: " (identity(1) + 2)

# ------ 'Must' calls ------

# 'must' call are special calls that cause a panic if there is an error.

# A Go function is considered to have failed if the last return value is a non-nil error.
# A Go function that doesn't fail has one less return value.

# An Inox function is considered to have failed if it returns an error or an Array whose last element is an error.
# If an Inoxfunction doesn't fail the returned value is transformed:
# (error|nil) -> nil
# Array(1, (error|nil)) -> 1
# Array(1, 2, (error|nil)) -> Array(1, 2)
# note: Inox functions always return a single value.

fn g(){
    return Array(1, Error("expected failure !!"))
}

# syntax for 'must' calls:
# one = g!()
