# this script generates docs/builtin.md

const (
    DATA_FILE = ./internal/globals/help/builtin.yaml
    OUTPUT_FILE = ./docs/builtin.md
)

manifest {
    permissions: {
        read: IWD_PREFIX
        write: IWD_PREFIX
        create: {routines: {}}
    }
}


%example = %{
    code?: %str
    explanation?: %str
    output?: %str,
    ...
}

%topic-data = %{
    topic: %str
    text?: %str
    examples?: %[]%example
    ...
}


help_data = read!(DATA_FILE)
assert (help_data match %[%obj])


groups = help_data[0]
group_names = sort(propnames(groups), #lex)

var builtin %str = ""

# underline

for i, group_name in group_names {
    group = groups.(group_name)

    fragment = replace!(" ", "-", group_name)

    builtin = concat builtin "- [" strmanip.title_case(group_name) "](#" fragment ")\n"
}

# topics

for i, group_name in group_names {
    group = groups.(group_name)

    assert (group match %{
        namespace?: %bool
        elements: %[]%topic-data
        ...
    })

    if (i > 0) {
        builtin = concat builtin "\n"
    }

    builtin = (concat builtin
        "## " strmanip.title_case(group_name) "\n\n"
    )

    for v in group.elements {
        assert (v match %topic-data)

        var examples %str = ""
        if v.?examples? {
            examples = (concat ""
                "\n**examples**\n\n"

                ...map((v.?examples ?? []), fn(example %example) %str { # todo: return type should not be necessary
                    code = example.?code
                    if code? {
                        output = example.?output
                        if output? {
                            output = concat "\n# output: \n" output
                        } 
                        return concat "```inox\n" code (output ?? "") "\n```\n"
                    }
                    return ""
                })
            )
        }

        builtin = (concat builtin 
            "### " v.topic "\n\n"
            (v.?text ?? "") "\n"
            examples
        )
    }
}


output = `
# Builtin

{{builtin}}
`

if fs.exists(OUTPUT_FILE) {
    update $$OUTPUT_FILE replace $output
} else {
    create $$OUTPUT_FILE $output
}
