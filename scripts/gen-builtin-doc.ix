# this script generates docs/builtin.md

const (
    DATA_FILE = ./internal/globals/help_ns/builtin.yaml
    OUTPUT_FILE = ./docs/builtin.md
)

manifest {
    permissions: {
        read: IWD_PREFIX
        write: IWD_PREFIX
    }
}


%example = {
    code?: str
    explanation?: str
    output?: str
}

%leaf-topic-data = {
    topic: str
    text?: str
    examples?: []example
}

%topic-data = {
    ...leaf-topic-data
    subtopics?: []leaf-topic-data
}


%group-data = {
    namespace?: bool
    elements: []topic-data
    title?: str
}

fn fmt_topic_markdown(topic leaf-topic-data, is_leaf bool){
    markdown = ""
    var examples %str = ""
    if topic.?examples? {
        examples = (concat ""
            "\n**examples**\n\n"

            ...map((topic.?examples ?? []), fn(example example) %str { # todo: return type should not be necessary
                code = example.?code
                if code? {
                    output = example.?output
                    if output? {
                        output = concat "\n# output: \n" output
                    } 
                    return concat "```inox\n" code (output ?? "") "\n```\n"
                }
                return ""
            })
        )
    }

    # make sure the text ends with '.'
    var text %str = strmanip.trim_space((topic.?text ?? ""))
    if ((text != "") and !(text match %`.+\.$`)){
        text = concat text "."
    }

    head_level = "### "
    if is_leaf {
        head_level = "#### "
    }

    return (concat head_level
        topic.topic "\n\n"
        text "\n"
        examples
    )
}

help_data = read!(DATA_FILE)
assert (help_data match %[%object])


groups = help_data[0]
group_names = sort(propnames(groups), #lex)

var builtin %str = ""

# outline

for i, group_name in group_names {
    group = groups.(group_name)
    assert (group match %group-data)

    title = (group.?title ?? group_name)
    fragment = strmanip.lowercase(replace!(" ", "-", title)) 

    builtin = `{{builtin}} - [{{title}}](#{{fragment}})\n`
}

# topics

for i, group_name in group_names {
    group = groups.(group_name)
    assert (group match %group-data)

    title = (group.?title ?? group_name)


    if (i > 0) {
        builtin = concat builtin "\n"
    }

    builtin = (concat builtin
        "## " title "\n\n"
    )

    for topic in group.elements {
        assert (topic match %topic-data)

        topic_markdown = fmt_topic_markdown(topic, false)
        builtin = concat builtin topic_markdown

        for sub_topic in (topic.?subtopics ?? []) {
            topic_markdown = fmt_topic_markdown(sub_topic, true)
            builtin = concat builtin topic_markdown
        }
    }
}

output = `
[Install Inox](../README.md#installation) | [Language Reference](./language-reference.md) | [Shell Basics](./shell-basics.md) | [Scripting Basics](./scripting-basics.md)

-----

# Built-in

{{builtin}}
`

if fs.exists(OUTPUT_FILE) {
    update $$OUTPUT_FILE replace $output
} else {
    create $$OUTPUT_FILE $output
}
